#!/bin/bash

# Check if application name is provided
if [ $# -eq 0 ]; then
    echo "Please provide an application name"
    echo "Usage: $0 <application-name>"
    exit 1
fi

app_name=$1

# Get all PIDs for the application - using more exact matching
pids=$(pgrep -x "$app_name" 2>/dev/null || pgrep -f "$app_name" 2>/dev/null)

if [ -z "$pids" ]; then
    echo "No process found for $app_name"
    exit 1
fi

# Initialize total memory and CPU usage
total_mem=0
total_cpu=0

# Calculate total memory and CPU usage for all PIDs
for pid in $pids; do
    # Check if process still exists (could have terminated)
    if ! kill -0 $pid 2>/dev/null; then
        continue
    fi
    
    # Get memory in KB and convert to human readable
    if mem=$(ps -p $pid -o rss= 2>/dev/null); then
        mem=$(echo "$mem" | tr -d ' ')
        total_mem=$((total_mem + mem))
    fi

    # Get CPU percentage with better precision
    if cpu=$(ps -p $pid -o %cpu= 2>/dev/null); then
        cpu=$(echo "$cpu" | tr -d ' ')
        total_cpu=$(LC_ALL=C awk "BEGIN {printf \"%.1f\", $total_cpu + $cpu}")
    fi
done

# Convert memory to human readable format
if [ $total_mem -gt 1048576 ]; then
    mem_human=$(LC_ALL=C awk "BEGIN {printf \"%.2f\", $total_mem/1048576}")"GB"
elif [ $total_mem -gt 1024 ]; then
    mem_human=$(LC_ALL=C awk "BEGIN {printf \"%.2f\", $total_mem/1024}")"MB"
else
    mem_human="${total_mem}KB"
fi

echo "Application         : $app_name"
echo "Total Memory Usage  : $mem_human"
echo "Total CPU Usage     : $total_cpu%"

# Alternative tools suggestion as comment:
# You might also want to try these tools:
# 1. ps_mem - For accurate memory usage per program
# 2. pidstat - Part of sysstat package, shows CPU/memory stats per process
# 3. glances - Advanced system monitoring tool with process grouping

